#!/bin/sh
# re-run this if the container is removed
if [ "$1" ]; then
  {% if 'zuul' in item.service %}
    {% set module = 'zuul' %}
  {% elif 'nodepool' in item.service %}
    {% set module = 'nodepool' %}
  {% else %}
    {% set module = 'unknown' %}
  {% endif %}
  container_exec_path=$(podman run --rm {{ item.image }} python3 -c "import {{ module }}, os.path; print(os.path.dirname({{ module }}.__file__) + '/')")
  patched_volume=" --volume $1:$container_exec_path:z "
fi
podman create --name {{ item.service }} {{ item.params }} {{ _self_signed_certs | default(None) }} {{ container_extra_volumes | default(None) }} $patched_volume {{ item.image }} {{ item.run | default(None) }}
{% if _local_ca_exists.stat.isreg or service.command is defined %}
{% if item['trigger_start'] | default(true) %}
podman start {{ item.service }}
{% endif %}
{% if item.command is defined %}
podman cp /usr/local/bin/configure-{{ item.service }}.sh {{ item.service }}:/tmp/configure-{{ item.service }}.sh
podman exec -ti {{ item.service }} /bin/bash /tmp/configure-{{ item.service }}.sh
{% endif %}
{% if item.service == 'zuul-web' %}
# Copy the js site to the host each time we recreate the container. We use an intermediate dir because podman cp does not seem to behave as intended.
tmpdir=$(mktemp -d)
podman cp {{ item.service }}:/usr/local/lib/python3.8/site-packages/zuul/web/static/. $tmpdir
mv $tmpdir/static/* /usr/share/zuul/
rm -rf $tmpdir
chmod -R 755 /usr/share/zuul
semanage fcontext -a -t httpd_sys_content_t "/usr/share/zuul/.*"
{% endif %}
{% if item.stopped is defined%}
podman stop {{ item.service }}
{% endif %}
{% endif %}
