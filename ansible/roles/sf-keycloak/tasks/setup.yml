---
# Use real shell for replication tests. TODO: improve replication test and set /sbin/nologin shell
- name: Check container image version
  include_role:
    name: sf-container
    tasks_from: check_version.yaml
  loop: "{{ keycloak_components }}"
  when: item.dependencies_fulfilled | bool

- include_tasks: "{{ sf_tasks_dir }}/create_user.yml"
  vars:
    user_name: "{{ owner }}"

- name: Create container directory
  include_role:
    name: sf-container
    tasks_from: create_directory.yaml
  loop:
    - {path: "{{ keycloak_dir }}/github-ssh-key-updater"}
    - {path: "/var/log/keycloak"}

- name: Configure github SSH key updater
  template:
    src: "{{ item.name }}.j2"
    dest: "{{ item.path }}/config.yaml"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode }}"
    backup: yes
  loop:
    - name: gsku-config.yaml
      path: "{{ keycloak_dir }}/github-ssh-key-updater/"
      mode: "0440"
      user: keycloak
      group: keycloak
  when:
   - "'gerrit' in roles"
   - "'firehose' in roles"

- name: Create cert dir
  file:
    path: "{{ keycloak_certs_dir }}"
    owner: "{{ owner }}"
    group: "{{ group }}"
    state: directory

- name: Copy certs
  copy:
    src: "{{ sf_cert_path }}/{{ item }}"
    dest: "{{ keycloak_certs_dir }}/{{ item }}"
    mode: "0644"
    owner: "{{ owner }}"
    group: "{{ group }}"
  loop:
    - keycloak.crt
    - keycloak.key
    - localCA.pem

- name: Changing folder /opt/keycloak permission to 755
  file:
    mode: "0755"
    dest: /opt/keycloak/
    recurse: true

- name: "Get {{ owner }} uid"
  command: id -u {{ owner }}
  register: _keycloak_uid

- name: "Expose {{ owner }} uid"
  set_fact:
    keycloak_uid: "{{ _keycloak_uid.stdout }}"

- name: Create container
  include_role:
    name: sf-container
    tasks_from: setup.yaml
  loop: "{{ keycloak_components }}"
  when: item.dependencies_fulfilled | bool

- name: Remove and create container if container sh file was modified
  block:

    - name: Delete container files
      include_role:
        name: sf-container
        tasks_from: delete.yaml
      loop: "{{ keycloak_components }}"
      when: item.dependencies_fulfilled | bool

    - name: Recreating {{ keycloak_components.service }} container files
      include_role:
        name: sf-container
        tasks_from: install.yaml
      loop: "{{ keycloak_components }}"
      when: item.dependencies_fulfilled | bool

    - name: Recreating {{ keycloak_components.service }} container
      include_role:
        name: sf-container
        tasks_from: setup.yaml
      loop: "{{ keycloak_components }}"
      when: item.dependencies_fulfilled | bool

  when: update_fqdn


- name: Start service
  systemd:
    name: "{{ item.service }}"
    state: started
    daemon_reload: "yes"
    enabled: "yes"
  loop: "{{ keycloak_components }}"
  when: item.dependencies_fulfilled | bool

- name: Wait for {{ role_package }} http port
  wait_for:
    port: "{{ keycloak_http_port }}"

- name: check for default realm
  command: |
    podman exec -ti {{ keycloak_components[0].service }}
    {{ keycloak_dir }}/bin/kcadm.sh get realms/{{ keycloak_default_realm }}
    {{ kcadm_options }}
  register: _default_realm
  # account for time needed to start the service
  retries: 60
  delay: 2
  until: _default_realm.rc == 0 or ( _default_realm.stdout is search("Resource not found", multiline=True, ignorecase=True) )
  ignore_errors: true
  no_log: show_hidden_logs == False

- name: Create default realm
  command: |
    podman exec -ti {{ keycloak_components[0].service }}
    {{ keycloak_dir }}/bin/kcadm.sh create realms
        --set realm={{ keycloak_default_realm }}
        --set enabled=true
        {{ kcadm_options }}
  when: _default_realm.rc != 0
  no_log: show_hidden_logs == False
  retries: 10
  delay: 3

- name: Check that user value serialization has the right type in mysql
  command: podman exec mysql mysql -u keycloak -p{{ keycloak_mysql_password }} keycloak -BNe "select data_type from information_schema.columns where table_name = 'USER_ATTRIBUTE' and column_name = 'VALUE';"
  register: _user_attribute_value_type
  delegate_to: "{{ mysql_host }}"
  no_log: true

- name: Convert user field to mediumblob
  command: podman exec mysql mysql -u keycloak -p{{ keycloak_mysql_password }} keycloak -e "alter table USER_ATTRIBUTE drop index IDX_USER_ATTRIBUTE_NAME; alter table USER_ATTRIBUTE modify VALUE TEXT(100000) CHARACTER SET utf8 COLLATE utf8_general_ci; alter table USER_ATTRIBUTE ADD KEY `IDX_USER_ATTRIBUTE_NAME` (`NAME`, VALUE(400));"
  delegate_to: "{{ mysql_host }}"
  when: _user_attribute_value_type.stdout != "mediumblob"

- name: Create default realm users
  include_tasks: create_or_update_user.yml
  vars:
    - realm_admin: true
    - service_name: "{{ keycloak_components[0].service }}"
  loop:
    - {
        username: "admin",
        password: "{{ authentication.admin_password }}",
        firstName: "Admin",
        lastName: "Software Factory",
        email: "admin@{{ fqdn }}",
      }
    - {
        username: "SF_SERVICE_USER",
        password: "{{ sf_service_user_password }}",
        firstName: "Service User",
        lastName: "Software Factory",
        email: "sf_service_user@{{ fqdn }}",
      }

- name: Create or update component-specific role
  include_tasks: configure_roles.yml
  vars:
    service_name: "{{ keycloak_components[0].service }}"
  loop:
    - {component: "opensearch",
       roles: [
            {name: "sf_opensearch_dashboards_user",
             description: "Default opensearch dashboards roles for SF users",
             default: True,
             assign_to: []},
            {name: "admin",
             default: False,
             description: "Admin access",
             assign_to: ["admin", ]},
          ]
      }
    - {component: "zuul",
       roles: [
            {name: "zuul_admin",
             description: "This role grants privileged actions such as dequeues and autoholds on every tenant created in the resources",
             default: False,
             assign_to: []},
          ]
      }
  loop_control:
    loop_var: config_item
  when: config_item.component in roles

- name: Create demo user
  include_tasks: create_or_update_user.yml
  vars:
    - realm_admin: false
    - service_name: "{{ keycloak_components[0].service }}"
  loop:
    - {username: "demo",
       password: "demo",
       firstName: "Demo",
       lastName: "User",
       email: "demo@{{ fqdn }}"}
  when:
    - provision_demo
    - "'{{ keycloak_components[0].service }}' in roles"
    - "'gerrit' in roles"

- name: Create test users
  include_tasks: create_or_update_user.yml
  vars:
    - realm_admin: false
    - service_name: "{{ keycloak_components[0].service }}"
  loop:
    - {
        username: "user2",
        password: "{{ authentication.admin_password }}",
        firstName: "Demo",
        lastName: "User2",
        email: "user2@{{ fqdn }}",
      }
    - {
        username: "user3",
        password: "{{ authentication.admin_password }}",
        firstName: "Demo",
        lastName: "User3",
        email: "user3@{{ fqdn }}",
      }
    - {
        username: "user4",
        password: "{{ authentication.admin_password }}",
        firstName: "Demo",
        lastName: "User4",
        email: "user4@{{ fqdn }}",
      }
    - {
        username: "user5",
        password: "{{ authentication.admin_password }}",
        firstName: "Demo",
        lastName: "User5",
        email: "user5@{{ fqdn }}",
      }
  when: "'sftests.com' in fqdn"

# TODO: these could be sfconfig options
- name: Allow user registration, password reset
  command: |
    podman exec -ti {{ keycloak_components[0].service }}
    {{ keycloak_dir }}/bin/kcadm.sh update realms/{{ keycloak_default_realm }}
        --set "registrationAllowed=true"
        --set "resetPasswordAllowed=true"
        {{ kcadm_options }}
  no_log: show_hidden_logs == False

- name: Apply custom themes to default realm
  command: |
    podman exec -ti {{ keycloak_components[0].service }}
    {{ keycloak_dir }}/bin/kcadm.sh update realms/{{ keycloak_default_realm }}
        --set "loginTheme=sf"
        --set "accountTheme=sf"
        {{ kcadm_options }}
  no_log: show_hidden_logs == False

- name: Configure SMTP service
  command: |
    podman exec -ti {{ keycloak_components[0].service }}
    {{ keycloak_dir }}/bin/kcadm.sh update realms/{{ keycloak_default_realm }}
        --set "smtpServer.host=127.0.0.1"
        --set "smtpServer.port=25"
        --set "smtpServer.from=keycloak@{{ fqdn }}"
        --set "smtpServer.replyTo=admin@{{ fqdn }}"
        --set 'smtpServer.fromDisplayName="Software Factory IAM"'
        {{ kcadm_options }}
  no_log: show_hidden_logs == False

- name: Configure expiry timeout for SSO sessions
  command: |
    podman exec -ti {{ keycloak_components[0].service }}
    {{ keycloak_dir }}/bin/kcadm.sh update realms/{{ keycloak_default_realm }}
        --set "ssoSessionMaxLifespan={{ authentication.sso_session_timeout }}"
        {{ kcadm_options }}
  no_log: show_hidden_logs == False
  when: '"sso_session_timeout" in authentication'

# Identity Providers

- name: Configure GitHub identity provider
  block:
    - name: Create the identity provider if needed
      command: |
        podman exec -ti {{ keycloak_components[0].service }}
        {{ keycloak_dir }}/bin/kcadm.sh create identity-provider/instances
            --target-realm {{ keycloak_default_realm }}
            --set alias=github
            --set providerId=github
            --set enabled=true
            --set 'config.useJwksUrl="true"'
            --set config.clientId={{ authentication.oauth2.github.client_id }}
            --set config.clientSecret={{ authentication.oauth2.github.client_secret }}
            {{ kcadm_options }}
    # Fail if error not due to idp already existing
      register: _gh_idp
      failed_when: _gh_idp.rc != 0 and not ( _gh_idp.stdout is search("Identity Provider github already exists", multiline=True, ignorecase=True) )
      no_log: show_hidden_logs == False

    - name: check for an existing SSH key mapper
      command: |
        podman exec -ti {{ keycloak_components[0].service }}
        {{ keycloak_dir }}/bin/kcadm.sh get identity-provider/instances/github/mappers
            --target-realm {{ keycloak_default_realm }}
            {{ kcadm_options }}
      register: _gh_key_mapper
      no_log: show_hidden_logs == False

    - name: Create the SSH key mapper if needed
      command: |
        podman exec -ti {{ keycloak_components[0].service }}
        {{ keycloak_dir }}/bin/kcadm.sh create identity-provider/instances/github/mappers
            --target-realm {{ keycloak_default_realm }}
            --set name=pubkey_mapper
            --set identityProviderMapper=github-ssh-key-mapper
            --set 'config={"keyAttribute":"publicKey"}'
            --set identityProviderAlias=github
            {{ kcadm_options }}
      when: _gh_key_mapper.stdout.find("publicKey") == -1
      no_log: show_hidden_logs == False
  when: not authentication.oauth2.github.disabled

# components OIDC clients

- name: Create or update OIDC clients
  include_tasks: configure_clients.yml
  loop:
    - component: "managesf"
      use_secret: False
      realm_role_mapper: True
      group_role_mapper: False
      add_custom_audience: False
    # Not sure if gerrit oauth uses groups from the IdP.
    - component: "gerrit"
      use_secret: True
      realm_role_mapper: False
      group_role_mapper: False
      add_custom_audience: False
    - component: "zuul"
      use_secret: False
      realm_role_mapper: True
      group_role_mapper: False
      add_custom_audience: True
    - component: "grafana"
      use_secret: True
      realm_role_mapper: True
      group_role_mapper: False
      add_custom_audience: False
    - component: "opensearch"
      use_secret: True
      realm_role_mapper: True
      group_role_mapper: False
      add_custom_audience: False

  when: item.component in roles

- name: Set up the firehose
  command: |
    podman exec -ti {{ keycloak_components[0].service }}
    {{ keycloak_dir }}/bin/kcadm.sh update events/config
        --target-realm {{ keycloak_default_realm }}
        --set 'eventsListeners=["jboss-logging","mqtt"]'
        --set eventsEnabled=true
        --set enabledEventTypes=[]
        {{ kcadm_options }}
  when: "'firehose' in roles"
  no_log: show_hidden_logs == False

- name: Copy {{ keycloak_components[0].service }} js adapter to gateway's /var/www/static/javascript
  block:
    - name: Get data
      get_url:
        url: "http://127.0.0.1:{{ keycloak_http_port }}/auth/js/keycloak.min.js"
        dest: /tmp/keycloak.min.js
    - name: Fetch data
      fetch:
        src: /tmp/keycloak.min.js
        dest: /var/www/static/javascript/
        flat: yes
      delegate_to: '{{ gateway_host }}'
    - name: Cleanup
      file:
        path: /tmp/keycloak.min.js
        state: absent


# This algorithm is unsupported by pyJWT in Zuul as of version 7
- name: Disable RSA-OAEP key algorithm
  block:
    - command: |
        podman exec -ti {{ keycloak_components[0].service }}
        {{ keycloak_dir }}/bin/kcadm.sh get components
            --compressed
            --target-realm {{ keycloak_default_realm }}
            --query name=rsa-enc-generated
            {{ kcadm_options }}
      register: _keyProviderInfo
      no_log: show_hidden_logs == False
    - set_fact:
        keyProviderId: "{{ _keyProviderInfo.stdout_lines | last | from_json }}"
      no_log: show_hidden_logs == False
    - command:
        podman exec -ti {{ keycloak_components[0].service }}
        {{ keycloak_dir }}/bin/kcadm.sh update components/{{ keyProviderId[0]['id'] }}
            --target-realm {{ keycloak_default_realm }}
            --set "config.active=[\"false\"]"
            --set "config.enabled=[\"false\"]"
            {{ kcadm_options }}
      no_log: show_hidden_logs == False
  # when: "'zuul' in roles"
